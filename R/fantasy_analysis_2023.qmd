---
title: "Example Analysis (Fantasy Football Analysis 2023)"
author: "Caleb Hallinan"
date: 11/10/2023
format:
  html:
    code-fold: true
    code-summary: "Code"
    code-tools: true
    embed-resources: true
fontsize: 12pt
geometry: margin=1.5in
fontcolor: black
---

<!-- Global params -->

```{r global options, include = FALSE}
knitr::opts_chunk$set(echo=TRUE, include = TRUE, warning=FALSE, message=FALSE)
```


## An Analysis on my 2023 Fantasy Football League (So Far)

My friends and I are [always]{.underline} talking about fantasy football. You may read that and think I'm kidding, but if you look at my phone screen time since football season started the top two are 1. The Iphone Messages App because I am messaging my friends about fantasy and 2. The ESPN Fantasy App. So no, I am not kidding. It's probably not worth it because I won't win this year anyways, but eh - it's fun and I enjoy it :)

<!-- football image -->

::: {style="text-align: center;"}
![[ESPN Fantasy App Logo](https://espnpressroom.com/us/press-releases/2016/08/espn-fantasy-footballs-21st-season-comprehensive-coverage-ever/)](fantasy_football.webp){width=400}
:::

<!-- Read in Packages -->
```{r}
# Read in my package ahead of time
library(tidyverse)
library(here)
library(ggplot2)
library(paletteer)
library(stringr)
```


## The Questions and Data

With this being said, I wanted to do a more in depth analysis of some fantasy football statistics so far this year. I wanted to answer questions like:

How accurate are your weekly projections?

How have the top picked players performed compared to what they were expected?

Are there any fantasy sleepers so far? (i.e. football players who are outperforming themselves, players who people like me didn't think would perform well)

??? More!

I have a few audiences I want this to reach:

1. My fantasy football friends
2. Others who do fantasy football and might find my analysis interesting
3. People who don't know fantasy football - I hope I can teach you something!


So for the data, I decided to use my football fantasy league of this year (2023). I could have done last year for a more complete analysis of how I didn't win, but this will give all my friends things to talk about now and I can continually update the analysis each week (which seemed pretty cool to me). It turns out I am not the first person that wanted this data, so lucky for me a guy named Tim Bryan made a function to extract all the data from the website. Click [here](https://github.com/tbryan2/espnfantasyfootball) to go to the specific repository I used from him.

However, not everything worked first try and I had to make some changes to his code to load in all the data without some errors. Feel free to check my github for what I did there. So, after some tweeks I was successfully able to read in and save everything I needed to a .csv file in my local directory. Here is a data dictionary for the variables I was using:


MAKE TABLE OF VARIABLES


Note: I de-identified all the data but mine to where my friends would know who they were but no one else can identify them.

The code below will read in the data I obtained using python. I do some pre-proccesing to remove weeks that haven't been played yet.

<!-- Read in data -->
```{r}
# read in data
data = read_csv(here("data/league_data_2023_deidentified.csv"))

# read in matchup data
matchups = read_csv(here("data/league_matchups_2023_deidentified.csv"))
# get rid of some of the data as it duplicated it
matchups = matchups[1:65,]

# NOTE: edit WEEK based on current week
data = data |> 
  # get rid of weeks 9-17
  filter(!Week %in% c(9:17))

matchups = matchups |> 
  # get rid of weeks 9-17
  filter(!Week %in% c(9:17))
```


## The Analysis

The first question I wanted to look at was one I was interested coming into this analysis. How accurate are your weekly projections? To me, it seems like they never are haha - I could be projected super high one week and then score 20 points below or vice versa any given week. So let's look at the plot below:

```{r}
# plot showing weekly projections to actual score
# data
data|>
  # groupby team name and week
  group_by(TeamName, Week)|>
  # get rid of bench players as they don't count towards score
  filter(PlayerRosterSlot != "Bench")|>
  # get the sum of your actual player roster and projected 
  summarize(weekly_score = sum(PlayerScoreActual),
            projected_weekly_score = sum(PlayerScoreProjected))|>
  # begin plotting
  ggplot(aes(x = Week, y = weekly_score, color = TeamName)) +
  # add solid line for actual total
  geom_line(aes(linetype = "solid", show.legend = FALSE)) +
  # dashed line for projected total
  geom_line(aes(y = projected_weekly_score, linetype = "dashed")) +
  # average projected
  # geom_hline(aes(yintercept=mean(projected_weekly_score), linetype = "dotted", color="red")) +
  # facet wrap by teamname
  facet_wrap(~ TeamName) +
  # add labels
  labs(
    title = "Weekly Actual and Projected Scores by Team", 
    x = "Week", 
    y = "Scores",
    caption = "Data Source: ESPN Fantasy Website",
    subtitle = str_wrap("????", width = 90)) +
  # add manual labels
  scale_linetype_manual(values = c("dashed", "solid"), labels = c("Projected", "Actual")) +
  # set y limit
  ylim(50, 180) +
  # set colors for teams
  scale_colour_manual(values = paletteer_d("ggprism::colors", 12)) +
  # get rid of color legend but use linetype legend
  guides(color = "none", linetype = guide_legend(title = "Scores")) +
  # use classic theme
  theme_classic() +
  # edit text and legend
  theme(axis.text.x = element_text(size = 12),
  axis.text.y = element_text(size = 12),
  plot.title = element_text(face= "bold", hjust = 0.5),
  legend.position = c(.725, 0), legend.justification = c(1, 0))
```

Well, I think I was right in thinking they aren't ideal but honestly a couple teams seem to follow it fairly well. Team BD is pretty consistent across the board so far, as with Team JN. However, there are some teams with large outlier weeks like Team GM who has had some insane weeks or Team TP who has had some not so great weeks. Overall, it is pretty interesting to see the actual points scored that week compared to the projected!


The next graph is probably my favorite for various reasons and was suggested by one of my friends in this league. What we wanted to look at was how your opponents score that week compared to the weekly average score, or in other words how much your opponent "went off" or "did horribly" compared to others. I then decided to go one step further to plot your score for that week as well, and you can see some really interesting and funny trends in this plot below.

```{r}
# Points against vs weekly average vs. opponents score
# making new dataframe
weekly_data = data|>
  # group by teamname and week
  group_by(TeamName, Week)|>
  # get rid of bench players
  filter(PlayerRosterSlot != "Bench")|>
  # get projected and weekly score for each team
  summarize(weekly_score = sum(PlayerScoreActual),
            projected_weekly_score = sum(PlayerScoreProjected)) 

# get points against using an inner join between weekly data and matchups data
# this is so I know who is playing who each week
pts_against = inner_join(weekly_data, matchups, by = c("Week")) |> 
  # had to only keep rows with the teamname of the week looked at
  filter(TeamName == Name1 | TeamName == Name2)

# add a column that is your opponent for that week
pts_against$opponent = ifelse(pts_against$TeamName == pts_against$Name1, pts_against$Name2,pts_against$Name1)
# get the opponents score for that week
pts_against$opponent_score = ifelse(pts_against$TeamName == pts_against$Name1, pts_against$Score2,pts_against$Score1)

# redfine dataframe
pts_against = pts_against |> 
  # select only handful of columns now that are needed for plot
  select(TeamName, Week, weekly_score, projected_weekly_score, opponent, opponent_score) |> 
  # group by week
  group_by(Week) |> 
  # get mean weekly average to plot as well
  mutate(weekly_average = mean(weekly_score))

# init plot
ggplot(pts_against, aes(x = Week, color = TeamName)) +
  # geom line for opponent score
  geom_line(aes(y = opponent_score, linetype = "dashed"), color= "gray") +
  # geom line for weekly average score
  geom_line(aes(y = weekly_average, linetype = "dotted"), color= "black") + 
  # geom line for your score
  geom_line(aes(y = weekly_score, linetype = "solid")) + 
  # wrap by team
  facet_wrap(.~ TeamName) +
  # set labs
  labs(
    title = "Weekly Average Score Compared to You and Your Opponent's Score", 
    x = "Week", 
    y = "Scores",
    caption = "Data Source: ESPN Fantasy Website",
    subtitle = str_wrap("????", width = 90)) +
  # set custom labels for linetype
  scale_linetype_manual(values = c("dashed", "dotted", "solid"), labels = c("Opponents Score", "Weekly Average", "Your Score")) +
  # set colors for teamnames
  scale_colour_manual(values = paletteer_d("ggprism::colors", 12)) +
  # get only legend for linetype
  guides(color = "none", linetype = guide_legend(title = "Scores")) +
  # theme classe
  theme_classic() +
  # edit text and legend position
  theme(axis.text.x = element_text(size = 12),
  axis.text.y = element_text(size = 12),
  plot.title = element_text(face= "bold", hjust = 0.5),
  legend.position = c(.73, -.025), legend.justification = c(1, 0))

```

?????



```{r, message=FALSE}
# Cumulative points over time and show distribution of each place

# Define the desired order of the positions
position_order <- c("K", "D/ST","TE", "FLEX","WR","RB", "QB")

# get data
data |> 
  # group by teamname and week
  group_by(TeamName, PlayerRosterSlot) |> 
  # filter IR players out
  filter(PlayerRosterSlot != "IR") |>
  # gilter bench players out
  filter(PlayerRosterSlot != "Bench") |>
  # get sum of weekly score
  summarise(total_score_per_position = sum(PlayerScoreActual))  |> 
  # factor rosterslot
  mutate(PlayerRosterSlot = factor(PlayerRosterSlot, levels = position_order)) |> 
  # plot in ggplot
  ggplot(aes(x = TeamName, y = total_score_per_position, fill = PlayerRosterSlot)) +    
  # geom bar of all positions
  geom_bar(position="dodge", stat="identity") +
    # change colors and add percent to y axis
    # scale_colour_manual(values = paletteer_d("ggprism::colors", 12)) +
  # labels
  labs(
      x = "Team Name",
      y = "Total Scores (Through Week 8)",
      fill = "Positions",
      title = "Total Score of Each Position For All Teams",
      caption = "Data Source: ESPN Fantasy Website",
      subtitle = str_wrap("????", width = 90)) +
  # change theme to linedraw
  theme_linedraw() + 
  # edit text
  theme(axis.text.x = element_text(angle = 45, hjust = 1), 
    text = element_text(size = 12),
    plot.title = element_text(face = "bold", hjust = 0.5)) +
  # add colors to each position
  scale_fill_manual(values = paletteer_d("NatParksPalettes::GrandCanyon", 7))

```




```{r}
# graph for worst loss differential

# grab difference of scores
matchups_diff = matchups |> 
  # find difference of scores
    mutate(Difference = Score1 - Score2)

# get team with lower score
matchups_diff$LowerScoreName = ifelse(matchups_diff$Difference < 0, matchups_diff$Name1, matchups_diff$Name2)

# get abs of difference and plot
matchups_diff |> 
  # absolute the difference 
  mutate(Difference = abs(Difference)) |> 
  # group by team
  group_by(LowerScoreName) |> 
  # get sum of differences for each team
  summarise(sum_diff = sum(Difference)) |> 
  # init plot
  ggplot(aes(x = LowerScoreName, y = sum_diff, fill = LowerScoreName)) +
  # geom bar for each team
  geom_bar(stat = "identity", position = "dodge") +
  # add colors
  scale_fill_manual(values = paletteer_d("ggprism::colors", 12)) +
  # change to linedraw
  theme_linedraw() + 
  # add theme
  theme(axis.text.x = element_text(angle = 45, hjust = 1), 
    text = element_text(size = 12),
    plot.title = element_text(face = "bold", hjust = 0.5)) +
  # add labels
  labs(
    x = "Team Name",
    y = "Total Loss Differential",
    title = "Total Loss Differential For Each Team (Through Week 8)",
    fill = "Team Name",
    caption = "Data Source: ESPN Fantasy Website",
    subtitle = str_wrap("????", width = 90)) +
  # get rid of legend
  guides(fill = "none")

```

Honestly, this plot was solely made so we could make fun of whoever has the worst Loss Differential, so sorry Team TP 😅


## Final Thoughts:



## Functions used:

<!-- At the end of the data analysis, list out each of the functions you used from each of the packages (dplyr, tidyr, and ggplot2) to help the TA with respect to making sure you met all the requirements described above. -->


## Resources:

- https://jman4190.medium.com/analyzing-your-fantasy-football-season-with-python-8c228262eae9

- https://github.com/tbryan2/espnfantasyfootball

- https://stmorse.github.io/journal/espn-fantasy-projections.html

- https://www.espn.com/fantasy/football/


<!-- Your analysis must include a .bib file, which you use to reference at least three unique citations. For example, it could be to a website or paper from where the original data came from or it could be to a paper describing a method you are using to analyze the data. -->



<!-- Extra plots not used -->

```{r, include=FALSE}
# Cumulative points over time

# get data
data_cumsum = data |> 
  # group by teamname and week
  group_by(TeamName, Week) |> 
  # filter bench players our
  # filter(PlayerRosterSlot != "Bench") |> 
  # get sum of weekly score
  summarise(weekly_score = sum(PlayerScoreActual))  |> 
  # ungroup week
  ungroup(Week) |> 
  # get cumulative score over weeks
  mutate(cumulative_score = cumsum(weekly_score))

# plot in ggplot
ggplot(data_cumsum, aes(x=Week, y = cumulative_score, color = TeamName)) +
  geom_line(size=1) +
  xlim(1,8)  +
  # ylim(50,180) +
  # change colors and add percent to y axis
  scale_colour_manual(values = paletteer_d("ggprism::colors", 12)) +
  labs(
      x = "Week",
      y = "Weekly Score",
      color = "Team",
      title = "Weekly Score for Every Team")
```



```{r, include=FALSE}
# Cumulative points over time for WR

# get data
data |> 
  # group by teamname and week
  group_by(TeamName, Week) |> 
  # filter bench players our
  filter(PlayerRosterSlot == "K") |>
  # get sum of weekly score
  summarise(weekly_score = sum(PlayerScoreActual))  |> 
  # ungroup week
  ungroup(Week) |> 
  # get cumulative score over weeks
  mutate(cumulative_score = cumsum(weekly_score)) |> 
  # plot in ggplot
  ggplot(aes(x=Week, y = cumulative_score, color = TeamName)) +
    geom_line(size=1) +
    xlim(1,8)  +
    # ylim(50,180) +
    # change colors and add percent to y axis
    scale_colour_manual(values = paletteer_d("ggprism::colors", 12)) +
    labs(
        x = "Week",
        y = "Weekly Score",
        color = "Team",
        title = "Weekly Score for Every Team") 

```


```{r, include=FALSE}

data |> 
    group_by(TeamName, Week) |> 
    filter(PlayerRosterSlot != "Bench") |> 
    summarize(weekly_score = sum(PlayerScoreActual)) |> 
    ggplot(aes(x=Week, y = weekly_score, color = TeamName)) +
    geom_line(size=1) +
    xlim(1,8)  +
    ylim(50,180) +
    # change colors and add percent to y axis
    scale_colour_manual(values = paletteer_d("ggprism::colors", 12)) +
    labs(
        x = "Week",
        y = "Weekly Score",
        color = "Team",
        title = "Weekly Score for Every Team")


```



```{r, include=FALSE}
# Finding out how each player compares to their projection

# data
data |> 
  mutate(difference_actual_proj = PlayerScoreActual - PlayerScoreProjected) |> 
  arrange(difference_actual_proj) |> 
  group_by(PlayerName) |> 
  summarise(sum_diff = sum(difference_actual_proj)) |> 
  arrange(desc(sum_diff))


# data
data |> 
  mutate(difference_actual_proj = PlayerScoreActual - PlayerScoreProjected) |> 
  arrange(difference_actual_proj) |> 
  group_by(PlayerName) |> 
  summarise(sum_diff = sum(difference_actual_proj)) |> 
  arrange(sum_diff)

```
