---
title: "Example Analysis (Fantasy Football Analysis 2023)"
author: "Caleb Hallinan"
date: 11/10/2023
format:
  html:
    code-fold: true
    code-summary: "Code"
    code-tools: true
    embed-resources: true
fontsize: 12pt
geometry: margin=1.5in
fontcolor: black
---

<!-- Global params -->

```{r global options, include = FALSE}
knitr::opts_chunk$set(echo=TRUE, include = TRUE, warning=FALSE, message=FALSE)
```


## An Analysis on my 2023 Fantasy Football League (So Far)

My friends and I are always talking about fantasy football. You may read that and think I'm kidding, but if you look at my screen time since football started the top two are 1. The Iphone Messages App because I am always messaging my friends about fantasy and 2. The ESPN Fantasy App. So no, I am not kidding. It's probably not worth it because I won't win this year anyways, but eh - it's fun and I enjoy it :)

<!-- football image -->

::: {style="text-align: center;"}
![[Image Source](https://www.espn.com/fantasy/football/)](fantasy_football.png){width=600}
:::

<!-- Read in Packages -->
```{r}
# Read in my package ahead of time
library(tidyverse)
library(here)
library(ggplot2)
library(paletteer)
```


## The Questions and Data

With this being said, I wanted to do a more in depth analysis of some fantasy football statistics so far this year. I wanted to answer questions like:

How accurate are your weekly projections?

How have the top picked players performed compared to what they were expected?

Are there any fantasy sleepers so far? (i.e. football players who are outperforming themselves, players who people like me didn't think would perform well)

??? More!

I have a few audiences I want this to reach:

1. My fantasy football friends
2. Others who do fantasy football and might find my analysis interesting
3. People who don't know fantasy football - I hope I can teach you something!


So for the data, I decided to use my football fantasy league of this year (2023). I could have done last year for a more complete analysis of how I didn't win, but this will give all my friends things to talk about now and I can continually update the analysis each week (which seemed pretty cool to me). It turns out I am not the first person that wanted this data, so lucky for me a guy named Tim Bryan made a function to extract all the data from the website. Click [here](https://github.com/tbryan2/espnfantasyfootball) to go to the specific repository I used from him.

Of course, not everything works first try and I had to make some changes to his code to load in all the data without some errors. Feel free to check my github for what I did there. However, after those tweeks I was successfully able to read in and save everything I needed to a .csv file in my local directory. Here is a data dictionary for the variables I was using:


MAKE TABLE OF VARIABLES


Note: I de-identified all the data but mine to where my friends would know who they were but no one else can identify them.


<!-- Read in data -->
```{r}
# read in data
data = read_csv(here("data/league_data_2023_deidentified.csv"))

# read in matchup data
matchups = read_csv(here("data/league_matchups_2023_deidentified.csv"))
# get rid of some of the data as it duplicated it
matchups = matchups[1:65,]

# NOTE: edit WEEK based on current week
data = data |> 
  # get rid of weeks 9-17
  filter(!Week %in% c(9:17))

matchups = matchups |> 
  # get rid of weeks 9-17
  filter(!Week %in% c(9:17))
```


## The Analysis






```{r}

data %>%
  group_by(TeamName, Week) %>%
  filter(PlayerRosterSlot != "Bench") %>%
  summarize(weekly_score = sum(PlayerScoreActual),
            projected_weekly_score = sum(PlayerScoreProjected)) %>%
  ggplot(aes(x = Week, y = weekly_score, color = TeamName)) +
  geom_line(aes(linetype = "solid", show.legend = FALSE)) +
  geom_line(aes(y = projected_weekly_score, linetype = "dashed")) +
  # average projected
  # geom_hline(aes(yintercept=mean(projected_weekly_score), linetype = "dotted", color="red")) +
  facet_wrap(~ TeamName) +
  labs(title = "Weekly Actual and Projected Scores by Team", x = "Week", y = "Scores") +
  scale_linetype_manual(values = c("dashed", "solid"), labels = c("Projected", "Actual")) +
  xlim(1, 8) +
  ylim(50, 180) +
  scale_colour_manual(values = paletteer_d("ggprism::colors", 12)) +
  guides(color = "none", linetype = guide_legend(title = "Scores")) +
    theme_classic() +
    theme(axis.text.x = element_text(size = 12),
    axis.text.y = element_text(size = 12),
    plot.title = element_text(face= "bold", hjust = 0.5),
    legend.position = c(.725, 0), legend.justification = c(1, 0))
```









```{r}
# Cumulative points over time and show distribution of each place

# Define the desired order of the positions
position_order <- c("K", "D/ST","TE", "FLEX","WR","RB", "QB")

# get data
data |> 
  # group by teamname and week
  group_by(TeamName, PlayerRosterSlot) |> 
  # filter IR players our
  filter(PlayerRosterSlot != "IR") |>
  filter(PlayerRosterSlot != "Bench") |>
  # get sum of weekly score
  summarise(total_score_per_position = sum(PlayerScoreActual))  |> 
  # factor rosterslot
  mutate(PlayerRosterSlot = factor(PlayerRosterSlot, levels = position_order)) |> 
  # plot in ggplot
  ggplot(aes(x = TeamName, y = total_score_per_position, fill = PlayerRosterSlot)) +    
  geom_bar(position="dodge", stat="identity") +
    # change colors and add percent to y axis
    # scale_colour_manual(values = paletteer_d("ggprism::colors", 12)) +
    labs(
        x = "Team Name",
        y = "Total Scores (Through Week 8)",
        fill = "Positions",
        title = "Total Score of Each Position For All Teams") +
  # change theme to classic
  theme_linedraw() + 
  theme(axis.text.x = element_text(angle = 45, hjust = 1), 
    text = element_text(size = 12),
    plot.title = element_text(face = "bold", hjust = 0.5)) +
  scale_fill_manual(values = paletteer_d("ggprism::colors", 12))



```




```{r}
# graph for worst loss differential

# grab difference of scores
matchups_diff = matchups |> 
    mutate(Difference = Score1 - Score2)

# get team with lower score
matchups_diff$LowerScoreName = ifelse(matchups_diff$Difference < 0, matchups_diff$Name1, matchups_diff$Name2)

# get abs of difference and plot
matchups_diff |> 
  mutate(Difference = abs(Difference)) |> 
  group_by(LowerScoreName) |> 
  summarise(sum_diff = sum(Difference)) |> 
  ggplot(aes(x = LowerScoreName, y = sum_diff, fill = LowerScoreName)) +
    geom_bar(stat = "identity", position = "dodge") +
  scale_fill_manual(values = paletteer_d("ggprism::colors", 12)) +
    theme_linedraw() + 
  theme(axis.text.x = element_text(angle = 45, hjust = 1), 
    text = element_text(size = 12),
    plot.title = element_text(face = "bold", hjust = 0.5)) +
  labs(
    x = "Team Name",
    y = "Total Loss Differential",
    title = "Total Loss Differential For Each Team",
    fill = "Team Name"
  ) +
  guides(fill = "none")


```



```{r}
# Points against vs weekly average
weekly_data = data %>%
  group_by(TeamName, Week) %>%
  filter(PlayerRosterSlot != "Bench") %>%
  summarize(weekly_score = sum(PlayerScoreActual),
            projected_weekly_score = sum(PlayerScoreProjected)) 

pts_against = inner_join(weekly_data, matchups, by = c("Week")) |> 
  filter(TeamName == Name1 | TeamName == Name2)
  
pts_against$opponent = ifelse(pts_against$TeamName == pts_against$Name1, pts_against$Name2,pts_against$Name1)
pts_against$opponent_score = ifelse(pts_against$TeamName == pts_against$Name1, pts_against$Score2,pts_against$Score1)


pts_against = pts_against |> 
  select(TeamName, Week, weekly_score, projected_weekly_score, opponent, opponent_score) |> 
  group_by(Week) |> 
  mutate(weekly_average = mean(weekly_score))


ggplot(pts_against, aes(x = Week, color = TeamName)) +
  geom_line(aes(y = opponent_score, linetype = "dashed"), color= "gray") +
  geom_line(aes(y = weekly_average, linetype = "dotted"), color= "black") + 
  geom_line(aes(y = weekly_score, linetype = "solid")) + 
  facet_wrap(.~ TeamName) +
  labs(title = "Weekly Average Score Compared to Opponents Score", x = "Week", y = "Scores") +
  scale_linetype_manual(values = c("dashed", "dotted", "solid"), labels = c("Opponents Score", "Weekly Average", "Your Score")) +
  scale_colour_manual(values = paletteer_d("ggprism::colors", 12)) +
    guides(color = "none", linetype = guide_legend(title = "Scores")) +
    theme_classic() +
    theme(axis.text.x = element_text(size = 12),
    axis.text.y = element_text(size = 12),
    plot.title = element_text(face= "bold", hjust = 0.5),
    legend.position = c(.73, -.025), legend.justification = c(1, 0))

```



<!-- Potential plots: -->
<!-- 1. Show who has top 25 best and worst players -->
<!-- 2. Which players are most similar to their projected score -->
<!-- 3. Team's with worst loss differential and best -->



Resources:

- https://jman4190.medium.com/analyzing-your-fantasy-football-season-with-python-8c228262eae9

- https://github.com/tbryan2/espnfantasyfootball

- https://stmorse.github.io/journal/espn-fantasy-projections.html

- https://www.espn.com/fantasy/football/



```{r, include=FALSE}
# Cumulative points over time

# get data
data_cumsum = data |> 
  # group by teamname and week
  group_by(TeamName, Week) |> 
  # filter bench players our
  # filter(PlayerRosterSlot != "Bench") |> 
  # get sum of weekly score
  summarise(weekly_score = sum(PlayerScoreActual))  |> 
  # ungroup week
  ungroup(Week) |> 
  # get cumulative score over weeks
  mutate(cumulative_score = cumsum(weekly_score))

# plot in ggplot
ggplot(data_cumsum, aes(x=Week, y = cumulative_score, color = TeamName)) +
  geom_line(size=1) +
  xlim(1,8)  +
  # ylim(50,180) +
  # change colors and add percent to y axis
  scale_colour_manual(values = paletteer_d("ggprism::colors", 12)) +
  labs(
      x = "Week",
      y = "Weekly Score",
      color = "Team",
      title = "Weekly Score for Every Team")
```



```{r, include=FALSE}
# Cumulative points over time for WR

# get data
data |> 
  # group by teamname and week
  group_by(TeamName, Week) |> 
  # filter bench players our
  filter(PlayerRosterSlot == "K") |>
  # get sum of weekly score
  summarise(weekly_score = sum(PlayerScoreActual))  |> 
  # ungroup week
  ungroup(Week) |> 
  # get cumulative score over weeks
  mutate(cumulative_score = cumsum(weekly_score)) |> 
  # plot in ggplot
  ggplot(aes(x=Week, y = cumulative_score, color = TeamName)) +
    geom_line(size=1) +
    xlim(1,8)  +
    # ylim(50,180) +
    # change colors and add percent to y axis
    scale_colour_manual(values = paletteer_d("ggprism::colors", 12)) +
    labs(
        x = "Week",
        y = "Weekly Score",
        color = "Team",
        title = "Weekly Score for Every Team") 

```


```{r, include=FALSE}

data |> 
    group_by(TeamName, Week) |> 
    filter(PlayerRosterSlot != "Bench") |> 
    summarize(weekly_score = sum(PlayerScoreActual)) |> 
    ggplot(aes(x=Week, y = weekly_score, color = TeamName)) +
    geom_line(size=1) +
    xlim(1,8)  +
    ylim(50,180) +
    # change colors and add percent to y axis
    scale_colour_manual(values = paletteer_d("ggprism::colors", 12)) +
    labs(
        x = "Week",
        y = "Weekly Score",
        color = "Team",
        title = "Weekly Score for Every Team")


```



```{r, include=FALSE}
# Finding out how each player compares to their projection

# data
data |> 
  mutate(difference_actual_proj = PlayerScoreActual - PlayerScoreProjected) |> 
  arrange(difference_actual_proj) |> 
  group_by(PlayerName) |> 
  summarise(sum_diff = sum(difference_actual_proj)) |> 
  arrange(desc(sum_diff))


# data
data |> 
  mutate(difference_actual_proj = PlayerScoreActual - PlayerScoreProjected) |> 
  arrange(difference_actual_proj) |> 
  group_by(PlayerName) |> 
  summarise(sum_diff = sum(difference_actual_proj)) |> 
  arrange(sum_diff)

```
